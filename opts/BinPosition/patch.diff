diff --git a/src/pool-bin/libraries/BinPosition.sol b/src/pool-bin/libraries/BinPosition.sol
index 3001eb0..82ccca7 100644
--- a/src/pool-bin/libraries/BinPosition.sol
+++ b/src/pool-bin/libraries/BinPosition.sol
@@ -19,20 +19,13 @@ library BinPosition {
     /// @param binId The bin id where the position's liquidity is added
     /// @param salt A unique value to differentiate between multiple positions in the same binId, by the same owner. Passed in by the caller.
     function calculatePositionKey(address owner, uint24 binId, bytes32 salt) internal pure returns (bytes32 key) {
-        // dev same as `positionKey = keccak256(abi.encodePacked(owner, binId, salt))`
+        // dev same as `positionKey = keccak256(abi.encodePacked(binId, owner, salt))`
         // make salt, binId, owner to be tightly packed in memory
         // mstore in reverse order make sure latter can make use of the empty space in the former
         assembly ("memory-safe") {
-            let fmp := mload(0x40)
-            mstore(add(fmp, 0x23), salt) // salt at [0x23, 0x43)
-            mstore(add(fmp, 0x03), binId) // binId at [0x20, 0x23)
-            mstore(fmp, owner) // owner at [0x0c, 0x20)
-            key := keccak256(add(fmp, 0x0c), 0x37) // len is 55 bytes
-
-            // now clean the memory we used
-            mstore(add(fmp, 0x40), 0) // fmp+0x40 held salt
-            mstore(add(fmp, 0x20), 0) // fmp+0x20 held binId, salt
-            mstore(fmp, 0) // fmp held owner
+            mstore(0x0, or(shl(160, binId), owner)) // binId at [0x09,0x0c), owner at [0x0c, 0x20)
+            mstore(0x20, salt) // owner at [0x20, 0x40)
+            key := keccak256(0x09, 55)
         }
     }
 
