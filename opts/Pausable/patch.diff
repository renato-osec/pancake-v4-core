diff --git a/src/base/Pausable.sol b/src/base/Pausable.sol
index d7ef56f..d32b35d 100644
--- a/src/base/Pausable.sol
+++ b/src/base/Pausable.sol
@@ -12,7 +12,7 @@ pragma solidity ^0.8.20;
  * simply including this module, only once the modifiers are put in place.
  */
 abstract contract Pausable {
-    bool private _paused;
+    uint256 private _paused;
 
     /**
      * @dev Emitted when the pause is triggered by `account`.
@@ -32,9 +32,6 @@ abstract contract Pausable {
     /**
      * @dev Initializes the contract in unpaused state.
      */
-    constructor() {
-        _paused = false;
-    }
 
     /**
      * @dev Modifier to make a function callable only when the contract is not paused.
@@ -51,8 +48,10 @@ abstract contract Pausable {
     /**
      * @dev Returns true if the contract is paused, and false otherwise.
      */
-    function paused() public view virtual returns (bool) {
-        return _paused;
+    function paused() public view virtual returns (bool res) {
+        assembly ("memory-safe") {
+            res := sload(_paused.slot)
+        }
     }
 
     /**
@@ -72,7 +71,7 @@ abstract contract Pausable {
      * - The contract must not be paused.
      */
     function _pause() internal virtual whenNotPaused {
-        _paused = true;
+        _paused = 1;
         emit Paused(msg.sender);
     }
 
@@ -80,7 +79,7 @@ abstract contract Pausable {
      * @dev Returns to normal state.
      */
     function _unpause() internal virtual {
-        _paused = false;
+        _paused = 0;
         emit Unpaused(msg.sender);
     }
 }
